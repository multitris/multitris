#!/usr/bin/ruby
#
# Author:: Johannes Krude
# Copyright:: (c) Johannes Krude 2008
# License:: AGPL3
#
#--
# This file is part of multitris.
#
# multitris is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# multitris is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with multitris.  If not, see <http://www.gnu.org/licenses/>.
#++

KEY_LEFT= 276
KEY_RIGHT= 275
KEY_UP= 273
KEY_DOWN= 274
KEY_TURN= 32
KEY_QUIT= 27

JOY_LEFT= 7
JOY_RIGHT= 5
JOY_UP= 4
JOY_DOWN= 6
JOY_TURN= 12
JOY_QUIT= 3


require 'client'
require 'sdl'

unless (2..3)=== ARGV.size
	STDERR.puts "usage: ./sdl-client server port [playername]"
	exit 1
end

SDL.init SDL::INIT_VIDEO | SDL::INIT_JOYSTICK
screen = SDL::setVideoMode 320,240,16, SDL::SWSURFACE|SDL::ANYFORMAT
SDL::Joystick.num.times do |i|
	SDL::Joystick.open(i)
end

client= Multitris::Client.new

control= false

$key_repeat= nil
$joy_up= 0
$joy_left= 0

Thread.new do
	loop do
		i= 0
		while (i<0.51-(0.5 * $joy_up).abs)
			sleep 0.01
			i+= 0.01
		end
		next unless control
		if $joy_up < 0
			client.up
		elsif $joy_up > 0
			client.down
		end
	end
end

Thread.new do
	loop do
		i= 0
		while (i<0.51-(0.5 * $joy_left).abs)
			sleep 0.01
			i+= 0.01
		end
		next unless control
		if $joy_left < 0
			client.left
		elsif $joy_left > 0
			client.right
		end
	end
end

def key_repeat_stop
	$key_repeat.exit if $key_repeat
	$key_repeat= nil
end

def key_repeat_start(&block)
	$key_repeat= Thread.new do
		sleep 0.2
		loop do
			block.call
			sleep 0.05
		end
	end
end

Thread.new do
	loop do
		while event=SDL::Event.poll
			if (SDL::Event::KeyDown===event and event.sym==KEY_QUIT) or (SDL::Event::JoyButtonDown===event and event.button==JOY_QUIT)
				client.close
				exit
			end
			block= case event
			when SDL::Event::KeyUp
				key_repeat_stop
				nil
			when SDL::Event::JoyButtonUp
				key_repeat_stop
				nil
			when SDL::Event::KeyDown
				key_repeat_stop
				next unless control
				case event.sym
				when KEY_LEFT
					lambda { client.left }
				when KEY_RIGHT
					lambda { client.right }
				when KEY_UP
					lambda { client.up }
				when KEY_DOWN
					lambda { client.down }
				when KEY_TURN
					lambda { client.turn }
				end
			when SDL::Event::JoyButtonDown
				key_repeat_stop
				next unless control
				case event.button
				when JOY_LEFT
					lambda { client.left }
				when JOY_RIGHT
					lambda { client.right }
				when JOY_UP
					lambda { client.up }
				when JOY_DOWN
					lambda { client.down }
				when 8
				when 9
				else
					lambda { client.turn }
				end
			when SDL::Event::JoyAxis
				case event.axis
				when 0
					$joy_left= 1.0 * event.value / 32768
				when 2
					$joy_left= 1.0 * event.value / 32768
				when 1
					$joy_up= 1.0 * event.value / 32768
				when 3
					$joy_up= 1.0 * event.value / 32768
				when 12
					$joy_up= (1.0 * event.value + 32768) / 32768
				when 13
					$joy_up= (1.0 * event.value + 32768) / 32768
				end
				nil
			end
			if block
				block.call
				key_repeat_start(&block)
			end
		end
		sleep 0.01
	end
end

begin
	client.connect(ARGV[0], ARGV[1], ARGV[2]) do |message|
		case message
		when "GOFORREST"
			control= true
		when "PLONK"
			control= false
		when /^ATTENTION (\w\w\w\w\w\w) (\d+)$/
			puts "You are player number #{$2}"
			puts "Your color is ##{$1}"
		else
			puts message
		end
	end
rescue Errno::ECONNREFUSED
	STDERR.puts "Connection refused"
	exit 2
end
exit

