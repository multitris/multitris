#!/usr/bin/ruby
#
# Author:: Johannes Krude
# Copyright:: (c) Johannes Krude 2008
# License:: AGPL3
#
#--
# This file is part of multitris.
#
# multitris is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# multitris is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with multitris.  If not, see <http://www.gnu.org/licenses/>.
#++

PORT= 1337
TIMEOUT= 1

require 'socket'
require 'httpserver'
require 'timeouts'
require 'pathname'

if ARGV.size != 2
	STDERR.puts "usage: ./ruby-web server port"
	exit 1
end

User= Struct.new(:connection, :pending)
users= Hash.new

timeouts= Timeouts.new(TIMEOUT)

webserver= HTTPServer.new("multitris-web")
webserver.listen(PORT) do |filename, vars|
	begin
		case filename
		when "command"
			vars["post-data"]=~ /^(\w+) (.*?)$/
			cookie= $1
			command= $2
			if (command=~ /^COOKIE (\w+)$/) # new connection
				begin
					next "ERROR" unless $1 == cookie
					user= User.new()
					user.connection= TCPSocket.new(ARGV[0], ARGV[1])
					user.pending= []
					timeouts.register(cookie) do
						timeouts.clear(cookie)
						user.pending << "FUCKYOU timeout"
						begin
							user.connection.close
						rescue IOError
						end
					end
					Thread.new do
						begin
							user.connection.each do |line|
								line.strip!
								case line
								when /^(CHUCK|ATTENTION|NOTBAD|THATWASMISERABLE) /
									user.pending << line
								when /^FUCKYOU/
									user.pending << line
									user.connection.close
								end
							end
							unless user.connection.closed?
								puts "refused"
								user.pending<< "FUCKYOU connection unexpectet lost"
								user.connection.close
							end
						rescue
							unless user.connection.closed?
								user.pending<< "FUCKYOU connection unexpectet lost"
								user.connection.close
							end
						end
					end
					users[cookie]= user
					""
				rescue Errno::ECONNREFUSED
					"FUCKYOU no server found"
				end
			else
				timeouts.reset(cookie)
				user= users[cookie]
				next "FUCKYOU no connection found" unless user
				user.connection.puts command unless command.empty?
				users.delete(cookie) if user.pending.empty? and user.connection.closed?
				if user.pending.size > 0
					user.pending.shift
				else
					""
				end
			end
		else
			HTTPServer::put_file("play.html", "text/html")
		end
	rescue
	end
end
client= Multitris::Client.new

